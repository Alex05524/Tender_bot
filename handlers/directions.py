import os
import asyncio
import aiogram
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.directions import (
    add_direction_info, get_direction, get_direction_info, set_winner_name, chek_direction,
    get_last_direction_id, set_who_close_direction_username, update_price_new
)
from db.direction_list import (
    close_direction_l, select_my_directionlist, chek_price_to_report,
    get_direction_list_direction_by_company, get_my_price_for_direction,
    insert_direction_list_info, select_my_direction, update_direction_price
)
from db.reports import (
    add_info_in_report, add_info_in_report_insert_direction_id, report_close_get_price,
    set_winner_name_report, close_direction_set_status, close_direction_set_who_close_direction,
    get_last_id_report
)
from db.users import (
    get_user_role, get_user_data_by_id, get_admin_and_managers_ids, get_direction_winner,
    get_username_by_id, get_telegram_id_company, get_user_company_by_telegram_id, get_telegram_id_user,
    get_admins_telegram_ids, get_users_telegram_ids, get_manager_telegram_ids, get_all_users, get_telegram_id_by_comapny
)
from aiogram.exceptions import TelegramBadRequest
from states.states import CreateLot, SentDirectionPrice, UpdateDirectionNewPrice, CloseDirection, SentDirectionPrice

ID = None
DATABASE_PATH = "telegram.db"

router = Router()

token=str(os.getenv('BOT_TOKEN'))
bot = Bot(token=token)

## –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
@router.callback_query(lambda c: c.data == "open_direction")
async def create_new_direction_summary(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    ID = callback_query.from_user.id
    user_id = callback_query.from_user.id
    user_role = get_user_role(ID)
    user_data = get_user_data_by_id(ID)
    if user_role and user_role[0] in ["manager", "admin"]:
        await callback_query.message.edit_text("‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        await state.set_state(CreateLot.summary)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {ID} –∏–º–µ–µ—Ç —Ä–æ–ª—å: {user_role}")
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data == "open_direction_renew", StateFilter(CreateLot.price))
async def create_new_direction_summary(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = await get_telegram_id_user(ID)
    user_role = await get_user_role(ID)
    user_data = get_user_data_by_id(ID)
    if not user_role:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_role[0] in ['manager', 'admin']:
        await callback_query.message.edit_text("‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/"
        if callback_query.message.text and callback_query.message.text.startswith("/"):
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '/'.")
        else:
            await state.set_state(CreateLot.summary)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.text & ~F.text.startswith('/'), StateFilter(CreateLot.summary))
async def create_new_direction_description(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    direction_summary = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    chek = chek_direction(direction_summary)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {chek}")

    if chek:
        await message.answer("‚ùå –¢–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(direction_summary=direction_summary)
        await state.set_state(CreateLot.description)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await message.answer("‚úí –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.text & ~F.text.startswith('/'), StateFilter(CreateLot.description))
async def create_new_direction_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(direction_description=message.text.strip())
    await message.answer("‚úí –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É.")
    await state.set_state(CreateLot.price)

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.text & ~F.text.startswith('/'), StateFilter(CreateLot.price))
async def create_new_direction_price_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(direction_price=message.text.strip())

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    summary = data.get("direction_summary")
    description = data.get("direction_description")
    price = data.get("direction_price")

    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary}, –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –¶–µ–Ω–∞: {price}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    create_direction = InlineKeyboardButton(text="‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="create_direction")
    dont_create_direction = InlineKeyboardButton(text="üîÑ –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ –Ω–æ–≤–æ–π", callback_data="open_direction_renew")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[create_direction], [dont_create_direction]])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(summary) > 25:
        await message.answer(
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!!!\n–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n"
            f"üó∫ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary}\n–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüí≤ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} —Ç–≥.",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            f"üó∫ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary}\n–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüí≤ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} —Ç–≥.",
            reply_markup=keyboard
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == 'create_direction', StateFilter(CreateLot.price))
async def countine_crete_direction(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    direction_status = 'Open'  # –°—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã direction
    close_name = 'null'  # –ü–æ–ª–µ close_name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null
    new_price = 'null'  # –ü–æ–ª–µ new_price –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    summary = data.get('direction_summary')
    description = data.get('direction_description')
    price = data.get('direction_price')
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = get_user_role(ID)
    if not user_role or user_role[0] not in ['admin', 'manager']:
        await callback_query.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.')
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–∫—Ä—ã–≤—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    who_open_direction = await get_username_by_id(ID)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data_by_id(ID)
    company_name = user_data[5] if user_data and len(user_data) > 5 else 'null'

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    get_to_main = InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='main')
    create_another_direction = InlineKeyboardButton(text='üîÇ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='open_direction')
    k = InlineKeyboardMarkup(inline_keyboard=[[get_to_main], [create_another_direction]])

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    last_direction_id = get_last_direction_id()
    try:
        if last_direction_id is None or last_direction_id[0] is None:
            direction_id = 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None, –Ω–∞—á–∏–Ω–∞–µ–º —Å ID = 1
        else:
            direction_id = last_direction_id[0] + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –Ω–∞ 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        direction_id = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID = 1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –æ—Ç—á–µ—Ç–∞
    try:
        last_id = await get_last_id_report()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è int –∏–ª–∏ None
        if last_id is None:
            last_id = 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å ID = 1
        else:
            last_id += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –Ω–∞ 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID –æ—Ç—á–µ—Ç–∞: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã direction –∏ report
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É direction —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º Open
        add_direction_info(direction_id, ID, summary, description, price, direction_status)
        print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {summary} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É direction —Å ID {direction_id}.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É direction: {e}")
        
        await add_info_in_report(who_open_direction, summary, price, new_price, company_name, direction_status, close_name)
        await add_info_in_report_insert_direction_id(direction_id, last_id)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É directionList
        try:
            insert_direction_list_info(
                ID,  # Telegram ID
                company_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                summary,  # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                price,  # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
                new_price,  # –ù–æ–≤–∞—è —Ü–µ–Ω–∞ (null)
                'active',  # –°—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è directionList
            )
            print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {summary} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É directionList.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É directionList: {e}")
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback_query.message.answer('‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ', reply_markup=k)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_role = 'user'
    user_telegram_ids = get_users_telegram_ids(user_role)
    direction_name = summary
    notification_text = f"üì¢ –ë—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_name}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} —Ç–≥."
    notification_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data=f'direction_{direction_name}')]
    ])

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    admin_and_managers_ids = await get_admin_and_managers_ids()
    for admin_or_manager_id in admin_and_managers_ids:
        try:
            await bot.send_message(
                int(admin_or_manager_id),
                f"üì¢ –ë—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_name}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} —Ç–≥.",
                reply_markup=notification_keyboard
            )
        except TelegramBadRequest as e:
            print(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è admin_or_manager_id: {admin_or_manager_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–º–µ–Ω–µ–¥–∂–µ—Ä—É {admin_or_manager_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in user_telegram_ids:
        try:
            await bot.send_message(
                int(user_id),
                f"üì¢ –ë—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_name}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} —Ç–≥.",
                reply_markup=notification_keyboard
            )
        except TelegramBadRequest as e:
            print(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id: {user_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == 'list_directionn', StateFilter('*'))
async def get_all_direction(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    all_directions = get_direction()
    print(f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {all_directions}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []

    if not all_directions:
        # –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for direction_name in all_directions:
            buttons.append([InlineKeyboardButton(
                text=str(direction_name),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
                callback_data=f'direction_{direction_name}'
            )])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
@router.callback_query(F.data.startswith('direction_'), StateFilter('*'))
async def get_info_from_direction(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
    """
    ID = callback_query.from_user.id
    direction_name = callback_query.data.replace('direction_', '')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    user_role = get_user_role(ID)
    user_data = get_user_data_by_id(ID)
    direction_info = get_direction_info(direction_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    if not direction_info:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Ä–æ–ª—å
    if not user_role or not user_data:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
    if user_role[0] in ['admin', 'manager']:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="list_directionn")]
        ])
        await callback_query.message.edit_text(
            f"‚ö† –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_info[3]}, ID: {direction_info[1]}\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {direction_info[4]}\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {direction_info[5]} —Ç–≥.",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        print(f"{user_data[2]} –ø–µ—Ä–µ—à–µ–ª –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {direction_info[1]}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(direction_all_info=direction_info)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É", callback_data="sent_you_price")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main")]
        ])

        await callback_query.message.edit_text(
            f"‚ö† –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_info[3]}, ID: {direction_info[1]}\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {direction_info[4]}\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {direction_info[5]} —Ç–≥.",
            reply_markup=keyboard
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(SentDirectionPrice.getIdDirection)
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ SentDirectionPrice.getIdDirection —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã 0
@router.callback_query(F.data == 'sent_you_price', StateFilter(SentDirectionPrice.getIdDirection))
async def sent_you_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–≤–æ–µ–π —Ü–µ–Ω—ã.
    """
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    company_name_tuple = get_user_company_by_telegram_id(ID)
    if not company_name_tuple:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    company_name = company_name_tuple[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ - {company_name} —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–µ–Ω—É")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_all_info = data.get('direction_all_info')
    if not direction_all_info or len(direction_all_info) < 6:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        return

    direction_name = direction_all_info[3]
    direction_start_price = direction_all_info[5]

    print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}, –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {direction_start_price}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞ –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è —Ü–µ–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    try:
        check = get_direction_list_direction_by_company(company_name, direction_name)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã: {check}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')]
    ])

    if check:
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞ —Ü–µ–Ω—É
        await callback_query.message.edit_text(
            "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ü–µ–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. "
            "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é, –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞ —Ü–µ–Ω—É
        await state.set_state(SentDirectionPrice.enterNewDirectionPrice)
        await callback_query.message.answer(
            f"üí≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. "
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {direction_start_price} —Ç–≥."
        )
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ SentDirectionPrice.enterNewDirectionPrice —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã 1
@router.message(StateFilter(SentDirectionPrice.enterNewDirectionPrice))
async def countine_setn_you_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ —á–∏—Å–ª–æ–º
    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
    new_price = int(message.text)
    if new_price <= 0:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_all_info = data.get('direction_all_info')
    if not direction_all_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction_start_price = int(direction_all_info[5])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π
    if new_price > direction_start_price:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π ({direction_start_price} —Ç–≥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_data = get_user_data_by_id(user_id)
    if not user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    company_name = user_data[5]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–≤–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π
    previous_price = get_my_price_for_direction(company_name, direction_all_info[3])
    if previous_price and new_price == int(previous_price[0]):
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π ({previous_price[0]} —Ç–≥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(direction_new_price=new_price)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='sent_my_new_price')],
        [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='dont_sent_you_price')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å {new_price} —Ç–≥?",
        reply_markup=keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã 2
@router.callback_query(F.data == 'sent_my_new_price', StateFilter(SentDirectionPrice.enterNewDirectionPrice))
async def create_new_direction_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_all_info = data.get('direction_all_info')
    direction_new_price_str = data.get('direction_new_price')

    if not direction_all_info or not direction_new_price_str:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    try:
        direction_old_price = int(str(direction_all_info[5]).replace(' ', ''))
        direction_new_price = int(str(direction_new_price_str).replace(' ', ''))
        direction_name = direction_all_info[3]
        direction_id = direction_all_info[1]
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ID = callback_query.from_user.id
    user_data = get_user_data_by_id(ID)
    if not user_data:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    company_name = user_data[5]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π
    if direction_new_price >= direction_old_price:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='accept_user_data')]
        ])
        await callback_query.message.edit_text(
            "üö´ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π!\n"
            "–í–≤–µ–¥–∏—Ç–µ /start –∏ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.",
            reply_markup=keyboard
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ —Ä–∞–≤–Ω–∞ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π
    previous_price = get_my_price_for_direction(company_name, direction_name)
    if previous_price and direction_new_price == int(previous_price[0]):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='accept_user_data')]
        ])
        await callback_query.message.edit_text(
            f"üö´ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π ({previous_price[0]} —Ç–≥).",
            reply_markup=keyboard
        )
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É direction_list
    direction_status = 'active'
    try:
        insert_direction_list_info(ID, company_name, direction_name, direction_old_price, direction_new_price, direction_status)
        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {ID}, {company_name}, {direction_name}, {direction_old_price}, {direction_new_price}, {direction_status}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É direction_list: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
    await callback_query.message.edit_text(
        "‚úÖ –•–æ—Ä–æ—à–æ, –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    notification_text = (
        f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ü–µ–Ω—É!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {company_name}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}\n"
        f"–¶–µ–Ω–∞: {direction_new_price} —Ç–≥."
    )

    roles = {
        'admin': get_admins_telegram_ids('admin'),
        'manager': get_manager_telegram_ids('manager'),
        'user': get_users_telegram_ids('user')
    }

    for role, ids in roles.items():
        for user_id in ids:
            try:
                await bot.send_message(
                    int(user_id),
                    notification_text if role != 'user' else (
                        f"–ë—ã–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}\n"
                        f"–¶–µ–Ω–∞: {direction_new_price} —Ç–≥."
                    )
                )
            except aiogram.utils.exceptions.ChatNotFound:
                print(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id: {user_id}")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –°—Ç–µ–π—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω—ã
@router.callback_query(F.data == 'dont_sent_you_price')
async def cancel_new_direction_price(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('‚õî –û—Ç–º–µ–Ω–µ–Ω–æ')

#### –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ####

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
@router.callback_query(F.data == 'close_direction')
async def close_direction(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.
    """
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] in ['admin', 'manager']:
        all_directions = get_direction()
        print(all_directions)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []
        for direction_name in all_directions:
            button = InlineKeyboardButton(text=direction_name, callback_data=f'cdirection_{direction_name}')
            buttons.append([button])

        get_back_admin = InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main')
        buttons.append([get_back_admin])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=keyboard)
    else:
        await callback_query.message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.')

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
@router.callback_query(F.data.startswith('cdirection_'))
async def get_info_from_direction(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º.
    """
    direction_name_for_close = callback_query.data.replace('cdirection_', '')
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {direction_name_for_close}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(direction_name_for_close=direction_name_for_close)

    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {direction_name_for_close}")
    await state.set_state(CloseDirection.chooseDirectionForClose)

    all_users = await get_direction_winner()
    print(f"–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {all_users}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    for winner in all_users:
        button = InlineKeyboardButton(text=winner, callback_data=f"winners_{winner}")
        buttons.append([button])

    get_back_admin = InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main')
    buttons.append([get_back_admin])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("winners_"), StateFilter(CloseDirection.chooseDirectionForClose))
async def accept_direction_winner(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    winner_name = callback_query.data.replace("winners_", "")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(direction_winner_name=winner_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_name = data.get("direction_name_for_close")

    if not direction_name:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="yes_close_direction")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å", callback_data="main")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback_query.message.edit_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_name}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CloseDirection.chooseDirectionWinner)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == 'yes_close_direction', StateFilter(CloseDirection.chooseDirectionWinner))
async def accept_close_direction(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    ID = callback_query.from_user.id
    user_data = get_user_data_by_id(ID)
    username_who_close = user_data[2]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_name_for_close = data.get('direction_name_for_close')
    direction_winner_name = data.get('direction_winner_name')

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_name_for_close}, –∫–æ–º–ø–∞–Ω–∏–∏: {direction_winner_name}")
    price_mass = chek_price_to_report(direction_name_for_close, direction_winner_name)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞: direction={direction_name_for_close}, company_name={direction_winner_name}")

    if price_mass:
        price = ''.join(filter(str.isdigit, price_mass[0]))
        try:
            print(f"–í—ã–∑–æ–≤ update_price —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: price={price}, direction_name={direction_name_for_close}, winner_name={direction_winner_name}")
            update_price_new(str(price), direction_name_for_close, direction_winner_name)
            print(price, '–¶–ï–ù–ê –ó–ê–ö–†–´–¢–ò–Ø –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")
            return
    else:
        print(f"–ö–æ–º–ø–∞–Ω–∏—è {direction_winner_name} –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∞ —Ü–µ–Ω—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction_name_for_close}")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await close_direction_set_status(direction_name_for_close)
    await close_direction_set_who_close_direction(username_who_close, direction_name_for_close)
    set_winner_name(direction_winner_name, direction_name_for_close)
    await set_winner_name_report(direction_winner_name, direction_name_for_close)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –∫—Ç–æ –∑–∞–∫—Ä—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    set_who_close_direction_username(username_who_close, direction_name_for_close)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
    price_for_close = await report_close_get_price(direction_name_for_close, direction_winner_name)
    print(price_for_close, '—Ü–µ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    close_direction_l(direction_name_for_close)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner_id = await get_telegram_id_company(direction_winner_name)
    winners = await get_telegram_id_by_comapny(direction_winner_name)
    print(f"ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {winner_id}, Telegram ID –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if winner_id:
        try:
            await bot.send_message(
                int(winner_id),
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {direction_name_for_close}"
            )
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner_id}: {e}")
    else:
        print(f"–û—à–∏–±–∫–∞: ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {direction_winner_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main')]
    ])
    await callback_query.message.edit_text(f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction_name_for_close} –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=keyboard)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    for winner in winners:
        try:
            await bot.send_message(
                int(winner),
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {direction_name_for_close}"
            )
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    admin_and_manager_ids = await get_admin_and_managers_ids()
    for admin_id in admin_and_manager_ids:
        try:
            await bot.send_message(
                int(admin_id),
                f"–ë—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_name_for_close}\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {direction_winner_name}\n"
                f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {price_for_close if price_for_close else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
            )
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–º–µ–Ω–µ–¥–∂–µ—Ä—É {admin_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_role = 'user'
    user_telegram_ids = get_users_telegram_ids(user_role)
    for user_id in user_telegram_ids:
        try:
            await bot.send_message(
                int(user_id),
                f"–ë—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n{direction_name_for_close}"
            )
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    direction_description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    direction_info = get_direction_info(direction_name_for_close)
    if direction_info:
        direction_description = direction_info[4]  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 5-–º —ç–ª–µ–º–µ–Ω—Ç–µ

    await notify_users_about_direction_closure(
        direction_name_for_close,
        direction_description,
        int(price_for_close) if price_for_close else 0,
        direction_winner_name
    )
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def notify_users_about_direction_closure(direction_name: str, direction_description: str, final_price: int, winner_name: str):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é user –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    user_ids = get_users_telegram_ids('user')

    notification_text = (
        f"üì¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {direction_description}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
        f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {final_price} —Ç–≥."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    tasks = []
    for user_id in user_ids:
        tasks.append(bot.send_message(user_id, notification_text))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks, return_exceptions=True)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for user_id, result in zip(user_ids, results):
        if isinstance(result, Exception):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {result}")

#### –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è ####

@router.callback_query(F.data == 'list_my_direction', StateFilter('*'))
async def get_list_my_direvtion(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
    —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã.
    """
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    company_info = get_user_data_by_id(ID)
    if not company_info or len(company_info) < 6:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    company_name = company_info[5]  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏: {company_info}")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {company_name}")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        my_directions = select_my_direction(company_name)
        print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}: {my_directions}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ select_my_direction: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if not my_directions:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')]
        ])
        await callback_query.message.edit_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å.",
            reply_markup=keyboard
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for direction_name in my_directions:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_info = select_my_directionlist(direction_name, ID)
        if direction_info:
            current_price = direction_info[0][1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{direction_name} - {current_price} —Ç–≥",
                    callback_data=f'update_price_{direction_name}'
                )
            ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        "üó∫ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å (—Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith('update_price_'), StateFilter('*'))
async def update_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã.
    """
    ID = callback_query.from_user.id
    data = callback_query.data.split('_')  # –ü—Ä–∏–º–µ—Ä callback_data: update_price_–ù–∞–∑–≤–∞–Ω–∏–µ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction_name = '_'.join(data[2:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    direction_info = select_my_directionlist(direction_name, ID)
    if not direction_info:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    current_price = direction_info[0][1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    await state.update_data(direction_name=direction_name)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üíµ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', callback_data='update_you_price')],
        [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è '{direction_name}': {current_price} —Ç–≥.",
        reply_markup=keyboard
    )

# –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
@router.callback_query(F.data == 'update_you_price', StateFilter('*'))
async def update_you_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_name = data.get('direction_name')

    if not direction_name:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
    await state.set_state("awaiting_new_price")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text(
        f"üí≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_name}"
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
@router.message(StateFilter("awaiting_new_price"))
async def set_new_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    if not message.text.isdigit():
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    new_price = int(message.text)
    if new_price <= 0:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_name = data.get('direction_name')

    if not direction_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    user_id = message.from_user.id
    direction_info = select_my_directionlist(direction_name, user_id)
    if not direction_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    current_price = int(direction_info[0][1])  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π
    if new_price >= current_price:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π ({current_price} —Ç–≥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_price=new_price)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_update_user_price')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='main')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É {new_price} —Ç–≥?",
        reply_markup=keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
@router.callback_query(F.data.startswith('mydirection_'), StateFilter('*'))
async def get_list_my_direvtion(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data_by_id(ID)
    if not user_data:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ callback_data
    direction_name = callback_query.data.replace('mydirection_', '').strip()
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_name}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    direction_info = get_direction_info(direction_name)
    if not direction_info:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    company_name = user_data[5]  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    direction_price_new = get_my_price_for_direction(company_name, direction_info[3])
    direction_price_new = direction_price_new[0] if direction_price_new else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    print(f"{user_data[2]} –ø–µ—Ä–µ—à–µ–ª –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {direction_info[3]}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üíµ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', callback_data='update_you_price')],
        [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')]
    ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        direction_name_for_update=direction_info[3],
        direction_direction_id=direction_info[1]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    await callback_query.message.edit_text(
        f"‚ö† –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {direction_info[3]}, ID: {direction_info[1]}\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {direction_info[4]}\n"
        f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {direction_info[5]}\n"
        f"–¶–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏: {direction_price_new}",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UpdateDirectionNewPrice.getDirectionInfo)
    print("–°–æ—Å—Ç–æ—è–Ω–∏–µ UpdateDirectionNewPrice.getDirectionInfo —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


@router.callback_query(F.data == 'update_you_price', StateFilter(UpdateDirectionNewPrice.getDirectionInfo))
async def update_you_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    """
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_name = data.get('direction_name_for_update')

    if not direction_name:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ID} –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_name}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='list_my_direction')]
    ])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.set_state(SentDirectionPrice.enterNewDirectionPrice)
    current_state = await state.get_state()
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {current_state}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text(
        f"üí≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_name}",
        reply_markup=keyboard
    )

@router.callback_query(F.data == 'yes_update_user_price', StateFilter('*'))
async def confirm_new_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    new_price = data.get('new_price')
    direction_name = data.get('direction_name')

    if not new_price or not direction_name:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    telegram_id = callback_query.from_user.id
    try:
        update_direction_price(direction_name, telegram_id, new_price)
        print(f"–¶–µ–Ω–∞ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è '{direction_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price} —Ç–≥.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_my_direction')],
        [InlineKeyboardButton(text='üîù –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')]
    ])
    await callback_query.message.edit_text(
        f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è '{direction_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price} —Ç–≥.",
        reply_markup=keyboard
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        company_name = get_user_data_by_id(telegram_id)[5]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        notification_text_admin_manager = (
            f"üì¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ–±–Ω–æ–≤–∏–ª —Ü–µ–Ω—É –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}\n"
            f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} —Ç–≥."
        )
        notification_text_user = (
            f"üì¢ –û–¥–∏–Ω –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ–±–Ω–æ–≤–∏–ª —Ü–µ–Ω—É:\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_name}\n"
            f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} —Ç–≥."
        )

        admins_id = get_admins_telegram_ids('admin')
        managers_id = get_manager_telegram_ids('manager')
        users_id = get_users_telegram_ids('user')

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in admins_id:
            try:
                await bot.send_message(admin_id, notification_text_admin_manager)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        for manager_id in managers_id:
            try:
                await bot.send_message(manager_id, notification_text_admin_manager)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in users_id:
            try:
                await bot.send_message(user_id, notification_text_user)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == 'list_of_suppliers')
async def get_all_username(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    """
    ID = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = await get_telegram_id_user(ID)
    user_role = get_user_role(ID)
    user_data = get_user_data_by_id(ID)
    if not user_role:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_role[0] in ['admin', 'manager']:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        get_main = InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_main]])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_usernames = await get_all_users()
        if not all_usernames:
            await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=keyboard)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_data = "\n\n".join([
            f"üë§ –ò–º—è: {name}\n"
            f"üÜî ID: {telegram_id}\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            for telegram_id, name, company, phone in all_usernames
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        await callback_query.message.edit_text(
            f"üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n\n{formatted_data}",
            reply_markup=keyboard
        )
        print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n{formatted_data}")
    else:
        await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")