from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from db.users import (
    get_user_role, get_all_username_without_you_id, check_user_correct_username,
    get_id_by_username, remove_user, update_user_name,
    check_user_correct_username_manger, update_company_name,
    get_telegram_id_user, get_user_data_by_id, get_managers, update_user_role,
    delete_managers_role, get_user_role_username, new_manager, update_phone_number
)
from db.ban_list import insert_id_to_ban_list
from states.states import CreateNewManager, ChangeUserNmae, ChangeUserCompany, ChnageUserPhone
from os import getenv
from dotenv import load_dotenv

load_dotenv()

ADMINS = getenv("ADMINS").split(',')

ID = None

router = Router()

@router.callback_query(F.data == 'user_settings')
async def user_settings(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    ID = callback_query.from_user.id
    user_id = get_telegram_id_user(ID)  # –î–æ–±–∞–≤–ª–µ–Ω–æ await
    user_role = get_user_role(ID)  # –î–æ–±–∞–≤–ª–µ–Ω–æ await
    user_data = get_user_data_by_id(ID)  # –î–æ–±–∞–≤–ª–µ–Ω–æ await

    if user_role and user_role[0] == 'admin':
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üöª –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers')],
            [InlineKeyboardButton(text='üõÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤', callback_data='get_all_managers_list')],
            [InlineKeyboardButton(text='üõÑ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ã', callback_data='add_new_manager')],
            [InlineKeyboardButton(text='‚õî –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data='rm_old_manager')],
            [InlineKeyboardButton(text='‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='deactivate_user')],
            [InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await callback_query.message.edit_text('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await callback_query.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤')

@router.callback_query(F.data == 'user_settings')
async def return_to_user_settings(callback_query: types.CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton('üöª –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers'),
        types.InlineKeyboardButton('üõÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤', callback_data='get_all_managers_list'),
        types.InlineKeyboardButton('üõÑ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ã', callback_data='add_new_manager'),
        types.InlineKeyboardButton('‚õî –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data='rm_old_manager'),
        types.InlineKeyboardButton('‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='deactivate_user'),
        types.InlineKeyboardButton('üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='user_settings')
    )
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'deactivate_user')
async def show_users_for_removal(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_all_username_without_you_id(ID)
        if not users:
            await callback_query.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons = [
            [InlineKeyboardButton(text=f"{name}", callback_data=f"confirm_remove_user:{name}")]
            for name in users
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="user_settings")])

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@router.callback_query(F.data.startswith("confirm_remove_user:"))
async def confirm_remove_user(callback_query: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    username = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å {username}", callback_data=f"delete_user:{username}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="deactivate_user")]
        ])
        await callback_query.message.edit_text(f"üõÇ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}?", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@router.callback_query(F.data.startswith("delete_user:"))
async def delete_user(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    username = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            user_id = await get_id_by_username(username)
            await insert_id_to_ban_list(user_id[0])  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–Ω-–ª–∏—Å—Ç
            await remove_user(username)  # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            await callback_query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.callback_query(F.data.startswith("delete_user:"))
async def delete_user(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    username = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_valid_user = await check_user_correct_username(username)
            if not is_valid_user:
                await callback_query.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await get_id_by_username(username)
            await insert_id_to_ban_list(user_id[0])  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–Ω-–ª–∏—Å—Ç
            await remove_user(username)  # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            await callback_query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == 'rm_old_manager')
async def show_managers_for_removal(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        managers = await get_managers()
        if not managers:
            await callback_query.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç.")
            return

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons = [
            [InlineKeyboardButton(text=f"{name} (ID: {telegram_id})", callback_data=f"confirm_remove:{name}")]
            for telegram_id, name, role in managers
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="user_settings")])

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text("üìù –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@router.callback_query(F.data.startswith("delete_manager:"))
async def delete_manager(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    manager_name = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            is_valid_manager = await check_user_correct_username_manger(manager_name)
            if not is_valid_manager:
                await callback_query.message.edit_text(f"‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –∏–º–µ–Ω–µ–º {manager_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await delete_managers_role('user', manager_name)
            await callback_query.message.edit_text(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.callback_query(F.data.startswith("confirm_remove:"))
async def confirm_remove_manager(callback_query: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    manager_name = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å {manager_name}", callback_data=f"delete_manager:{manager_name}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="rm_old_manager")]
        ])
        await callback_query.message.edit_text(f"üõÇ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_name}?", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data == 'get_all_managers_list')
async def list_managers(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    ID = callback_query.from_user.id
    user_id = await get_telegram_id_user(ID)
    user_role = get_user_role(ID)
    user_data = get_user_data_by_id(ID)

    if user_role and user_role[0] == 'admin':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        all_managers = await get_managers()
        if not all_managers:
            await callback_query.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        formatted_data = "\n".join([
            f"üë§ <b>{username}</b>\nüÜî ID: <code>{telegram_id}</code>\nüîñ –†–æ–ª—å: <i>{role}</i>\n"
            for telegram_id, username, role in all_managers
        ])

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="user_settings")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await callback_query.message.edit_text(
            f"<b>–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n{formatted_data}",
            reply_markup=keyboard,
            parse_mode="HTML"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        )
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")


@router.callback_query(F.data == 'main')
async def get_to_main(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ú–µ–Ω—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers')],
            [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
            [InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='open_direction')],
            [InlineKeyboardButton(text='üìï –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='close_direction')],
            [InlineKeyboardButton(text='üñä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='user_settings')],
            [InlineKeyboardButton(text='üìë –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data='get_report')]
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboard)
        print('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

    elif user_role and user_role[0] == 'manager':
        # –ú–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers')],
            [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
            [InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='open_direction')],
            [InlineKeyboardButton(text='üìï –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='close_direction')],
            [InlineKeyboardButton(text='üìë –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data='get_report')]
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboard)
        print('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞')

    else:
        # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')],
            [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
            [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')]
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=keyboard)
        print(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é: {user_role[0] if user_role else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == 'get_back_to_admin_menu')
async def get_back_to_admin_menu(callback_query: types.CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers')],
        [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
        [InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='open_direction')],
        [InlineKeyboardButton(text='üìï –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='close_direction')],
        [InlineKeyboardButton(text='üñä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='user_settings')]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboard)
    print('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–≤–≤–æ–¥ –∏–º–µ–Ω–∏)
@router.callback_query(F.data == 'add_new_manager')
async def show_users_for_manager_addition(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'user' –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
    """
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'user'
        usernames = await get_all_username_without_you_id(ID)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ username
        if not usernames:
            await callback_query.message.edit_text("üöπ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'user' –ø—É—Å—Ç.")
            return

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons = [
            [InlineKeyboardButton(text=username, callback_data=f"confirm_add_manager:{username}")]
            for username in usernames
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="user_settings")])

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text("üöπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@router.callback_query(F.data.startswith("confirm_add_manager:"))
async def confirm_add_manager(callback_query: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
    """
    telegram_id = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data=f"add_manager:{telegram_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="add_new_manager")]
        ])
        await callback_query.message.edit_text(f"üöπ –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {telegram_id} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?", reply_markup=keyboard)
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@router.callback_query(F.data.startswith("add_manager:"))
async def add_manager(callback_query: types.CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    telegram_id = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        try:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            await new_manager('manager', telegram_id)
            await callback_query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        except Exception as e:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.message(StateFilter(CreateNewManager.enterName))
async def create_new_manager_name(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '/'
    if message.text.startswith('/'):
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '/', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è!")
        await state.set_state(CreateNewManager.enterName)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(manager_name=message.text.strip())
    data = await state.get_data()
    username = data['manager_name']

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    old_user_role = await get_user_role_username(username)
    if not old_user_role:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    print(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {old_user_role[0]}")
    if old_user_role[0] == 'user':
        new_manager_name = data['manager_name']
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        yes_create_new_manager = InlineKeyboardButton(
            text=f"–î–∞, —Å–¥–µ–ª–∞—Ç—å {new_manager_name} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            callback_data=f"yes_create_new_manager:{new_manager_name}"
        )
        cancel_create_new_manager = InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∞", 
            callback_data="cancel_create_new_manager"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [yes_create_new_manager],
            [cancel_create_new_manager]
        ])

        await message.answer(f"üöπ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å {new_manager_name} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º?", reply_markup=keyboard)
    elif old_user_role[0] == 'manager':
        await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–æ–ª—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.callback_query(F.data.startswith("yes_create_new_manager"))
async def continue_create_new_manager(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ callback_data
    new_manager_name = callback_query.data.split(":")[1]
    ID = callback_query.from_user.id
    user_role = get_user_role(ID)

    if user_role and user_role[0] == 'admin':
        await new_manager('manager', new_manager_name)
        print(f"{new_manager_name} —Å—Ç–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        await callback_query.message.edit_text(f"‚úÖ {new_manager_name} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        await state.clear()
    else:
        await callback_query.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –û—Ç–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.callback_query(F.data == "cancel_create_new_manager")
async def cancel_create_manager(callback_query: types.CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    await callback_query.message.edit_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == 'accept_user_data')
async def accept_registration(callback_query: types.CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')],
        [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
        [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')]
    ])
    await callback_query.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'my_profile')
async def get_my_profile(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    ID = callback_query.from_user.id
    user_data = get_user_data_by_id(ID)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='change_user_data')],
        [InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='accept_user_data')]
    ])
    await callback_query.message.edit_text(
        f"üöπ –¢–≤–æ–µ –§–ò–û: {user_data[2]}\nüè¢ –¢–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è: {user_data[5]}\nüìû –¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data[6]}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'change_user_data')
async def change_user_data(callback_query: types.CallbackQuery):
    """
    –ú–µ–Ω—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üñä –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û', callback_data='change_user_name')],
        [InlineKeyboardButton(text='üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='change_company')],
        [InlineKeyboardButton(text='üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='change_phone')],
        [InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='accept_user_data')]
    ])
    await callback_query.message.edit_text("‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û
@router.callback_query(F.data == 'change_user_name')
async def change_user_name(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û.
    """
    await callback_query.message.edit_text("‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û")
    await state.set_state(ChangeUserNmae.enterNewUsername)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –§–ò–û
@router.message(StateFilter(ChangeUserNmae.enterNewUsername))
async def create_new_username(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –§–ò–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_username=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data='change_new_username')],
        [InlineKeyboardButton(text="‚õî –ù–µ—Ç", callback_data='dont_change_')]
    ])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    new_username = data['new_username']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(f"üóÇ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –§–ò–û –Ω–∞ - {new_username}?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û
@router.callback_query(F.data == 'change_new_username', StateFilter(ChangeUserNmae.enterNewUsername))
async def continue_create_new_username(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data = await state.get_data()
    new_user_name = data['new_username']
    ID = callback_query.from_user.id

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_name(new_user_name, ID)

    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')],
        [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
        [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')]
    ])
    await callback_query.message.edit_text(f"‚úÖ –í–∞—à–µ –§–ò–û –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_user_name}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
@router.callback_query(F.data == 'change_company')
async def change_company(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    await callback_query.message.edit_text('‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')
    await state.set_state(ChangeUserCompany.enterNewUserCompany)

@router.message(StateFilter(ChangeUserCompany.enterNewUserCompany))
async def change_company_name(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_company_name=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='change_new_company_name')],
        [InlineKeyboardButton(text="‚õî –ù–µ—Ç", callback_data='dont_change_')]
    ])
    await message.answer(f"üè¢ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ {message.text}?", reply_markup=keyboard)

@router.callback_query(F.data == 'change_new_company_name', StateFilter(ChangeUserCompany.enterNewUserCompany))
async def continue_change_new_company_name(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    data = await state.get_data()
    new_company_name = data['new_company_name']
    ID = callback_query.from_user.id

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    await update_company_name(new_company_name, ID)

    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')],
        [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
        [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')]
    ])
    await callback_query.message.edit_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_company_name}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(F.data == 'change_phone')
async def change_phone(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    await callback_query.message.edit_text('‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await state.set_state(ChnageUserPhone.enterNewUserPhone)

@router.message(StateFilter(ChnageUserPhone.enterNewUserPhone))
async def change_phone_number(message: types.Message, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_phone=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='change_new_phone_number')],
        [InlineKeyboardButton(text="‚õî –ù–µ—Ç", callback_data='dont_change_')]
    ])
    await message.answer(f"üìû –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ {message.text}?", reply_markup=keyboard)

@router.callback_query(F.data == 'change_new_phone_number', StateFilter(ChnageUserPhone.enterNewUserPhone))
async def continue_change_new_phone_number(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    new_number = data['new_phone']
    ID = callback_query.from_user.id

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update_phone_number(new_number, ID)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')],
        [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
        [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.message.edit_text(f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_number}", reply_markup=keyboard)

@router.message(F.text.startswith('/set_role'))
async def set_role_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_role –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_role <telegram_id> <role>
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    ID = str(message.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if ID not in ADMINS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —á–∞—Å—Ç–∏
    parts = message.text.split()
    if len(parts) != 3:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_role <telegram_id> <role>")
        return

    telegram_id, new_role = parts[1], parts[2].lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    if new_role not in ['user', 'manager', 'admin']:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: user, manager, admin.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    user_data = get_user_data_by_id(telegram_id)
    if not user_data:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await update_user_role(new_role, telegram_id)
        await message.reply(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {telegram_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")

@router.callback_query(F.data.startswith('dont_change_'))
async def cancel_action(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π.
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    ID = callback_query.from_user.id
    user_data = get_user_data_by_id(ID)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not user_data:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
    action = callback_query.data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "dont_change_"
    action_mapping = {
        "new_username": "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û",
        "new_company_name": "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏",
        "new_phone_number": "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    }

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    action_description = action_mapping.get(action, "–¥–µ–π—Å—Ç–≤–∏–µ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await callback_query.message.edit_text(
        f"‚õî {action_description.capitalize()} –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='change_user_data')],
        [InlineKeyboardButton(text='üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='accept_user_data')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text(
        f"üöπ –¢–≤–æ–µ –§–ò–û: {user_data[2]}\nüè¢ –¢–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è: {user_data[5]}\nüìû –¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data[6]}",
        reply_markup=keyboard
    )