from aiogram import Router, types, F
from states.states import ChangeUserNmae, ChangeUserCompany, ChnageUserPhone
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.users import get_user_data_by_id, update_user_name, update_company_name, update_phone_number

ID = None

router = Router()


@router.callback_query(F.data == "my_profile")
async def get_my_profile(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    ID = callback_query.from_user.id
    user_data = get_user_data_by_id(ID)

    change_user_data = InlineKeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='change_user_data')
    get_back_to_main = InlineKeyboardButton('üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='accept_user_data')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(change_user_data)
    keyboard.row(get_back_to_main)

    await callback_query.message.edit_text(
        f"–¢–≤–æ–µ –§–ò–û: {user_data[2]}\n"
        f"–¢–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è: {user_data[5]}\n"
        f"–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data[6]}",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "change_user_data")
async def change_user_data(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    change_user_name = InlineKeyboardButton('üñä –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û', callback_data='change_user_name')
    change_company = InlineKeyboardButton('üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='change_company')
    change_phone = InlineKeyboardButton('üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='change_phone')
    get_back_to_main = InlineKeyboardButton('üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='accept_user_data')
    keyboard = InlineKeyboardMarkup(row_width=4)
    keyboard.row(change_user_name)
    keyboard.row(change_company)
    keyboard.row(change_phone)
    keyboard.row(get_back_to_main)

    await callback_query.message.edit_text('–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)


@router.callback_query(F.data == "change_user_name")
async def change_user_name(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text('‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û')
    await state.set_state(ChangeUserNmae.enterNewUsername)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ


@router.callback_query(F.text, StateFilter(ChangeUserNmae.enterNewUsername))
async def create_new_username(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û.
    """
    async with state.update_data() as data:
        data['new_username'] = message.text

    yes = InlineKeyboardButton(f"‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data='change_new_username')
    no = InlineKeyboardButton(f"‚õî –ù–µ—Ç", callback_data='dont_change_new_username')
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.row(yes, no)

    await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –§–ò–û –Ω–∞ - {data['new_username']}?", reply_markup=keyboard)


@router.callback_query(F.data == "change_new_username", StateFilter(ChangeUserNmae.enterNewUsername))
async def continue_create_new_usernmae(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –§–ò–û.
    """
    async with state.update_data() as data:
        new_user_name = data['new_username']

    ID = callback_query.from_user.id
    update_user_name(new_user_name, ID)
    await state.clear()

    await callback_query.message.edit_text(f"–í–∞—à–µ –§–ò–û –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_user_name}")


@router.callback_query(F.data == "change_company")
async def change_company(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    await callback_query.message.edit_text('‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')
    await ChangeUserCompany.enterNewUserCompany.set()


@router.callback_query(F.text, StateFilter(ChangeUserCompany.enterNewUserCompany))
async def change_company_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    async with state.update_data() as data:
        data['new_company_name'] = message.text

    yes = InlineKeyboardButton(f"‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='change_new_company_name')
    no = InlineKeyboardButton(f"‚õî –ù–µ—Ç", callback_data='dont_change_new_company_name')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(yes, no)

    await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ {data['new_company_name']}?", reply_markup=keyboard)


@router.callback_query(F.data == "change_new_company_name", StateFilter(ChangeUserCompany.enterNewUserCompany))
async def continue_change_new_company_name(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    async with state.update_data() as data:
        new_company_name = data['new_company_name']

    ID = callback_query.from_user.id
    update_company_name(new_company_name, ID)
    await state.clear()

    await callback_query.message.edit_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_company_name}")


@router.callback_query(F.data == "change_phone")
async def change_phone(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    await callback_query.message.edit_text('‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await ChnageUserPhone.enterNewUserPhone.set()


@router.callback_query(F.text, StateFilter(ChnageUserPhone.enterNewUserPhone))
async def change_phone_number(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    async with state.update_data() as data:
        data['new_phone'] = message.text

    yes = InlineKeyboardButton(f"‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='change_new_phone_number')
    no = InlineKeyboardButton(f"‚õî –ù–µ—Ç", callback_data='dont_change_new_phone_number')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(yes, no)

    await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ {data['new_phone']}?", reply_markup=keyboard)


@router.callback_query(F.data == "change_new_phone_number", StateFilter(ChnageUserPhone.enterNewUserPhone))
async def countine_change_new_phone_number(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    async with state.update_data() as data:
        new_number = data['new_phone']

    ID = callback_query.from_user.id
    update_phone_number(new_number, ID)
    await state.clear()

    await callback_query.message.edit_text(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_number}")