from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.states import RegistrationState
from db.users import (
    add_user, get_user_role, get_user_data_by_id
)
from db.ban_list import get_ban_ids

ID = None

router = Router()

async def chek_ban():
    ban_list = await get_ban_ids()
    for cheked_ids in ban_list:
        print(f"all banned ids {cheked_ids}")
        return cheked_ids


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    ID = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–Ω-–ª–∏—Å—Ç
    user_data = get_user_data_by_id(ID)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_role = get_user_role(ID)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ban_list = await get_ban_ids()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {ID}, –†–æ–ª—å: {user_role}, –î–∞–Ω–Ω—ã–µ: {user_data}, –ë–∞–Ω-–ª–∏—Å—Ç: {ban_list}")

    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ
    if ID in ban_list:
        await message.answer("‚ùå –¢—ã –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not user_data:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await message.answer("‚úí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(RegistrationState.WaitingForName)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ä–æ–ª—å
    if user_role[0] == 'admin':
        # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers')],
            [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
            [InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='open_direction')],
            [InlineKeyboardButton(text='üìï –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='close_direction')],
            [InlineKeyboardButton(text='üñä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='user_settings')],
            [InlineKeyboardButton(text='üìë –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data='get_report')]
        ])
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=keyboard)
        print(f"–ê–¥–º–∏–Ω {user_data[2]} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–æ 2-–º —Å—Ç–æ–ª–±—Ü–µ

    elif user_role[0] == 'manager':
        # –ú–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', callback_data='list_of_suppliers')],
            [InlineKeyboardButton(text='üìñ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='open_direction')],
            [InlineKeyboardButton(text='üìï –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='close_direction')],
            [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
            [InlineKeyboardButton(text='üìë –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data='get_report')]
        ])
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –ú–µ–Ω–µ–¥–∂–µ—Ä!", reply_markup=keyboard)
        print(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_data[2]} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è.")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–æ 2-–º —Å—Ç–æ–ª–±—Ü–µ

    else:
        # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')],
            [InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')],
            [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')],
        ])
        await message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_data[2]}!", reply_markup=keyboard)  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ 2-–º —Å—Ç–æ–ª–±—Ü–µ


@router.message(F.text.startswith('/') == False, StateFilter(RegistrationState.WaitingForName))
async def get_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.update_data(name=message.text.strip())
    await message.answer('‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:')
    await state.set_state(RegistrationState.WaitingForCompanyName)


@router.message(F.text.startswith('/') == False, StateFilter(RegistrationState.WaitingForCompanyName))
async def get_company(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    await state.update_data(company=message.text.strip())
    await message.answer("‚úí –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationState.WaitingForPhone)


@router.message(F.text.startswith('/') == False, StateFilter(RegistrationState.WaitingForPhone))
async def get_phone(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    await state.update_data(phone=message.text.strip())

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    ID = message.from_user.id
    name = data['name']
    company_name = data['company']
    phone = data['phone']
    telegram_frist_name = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    telegram_second_name = message.from_user.last_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    print(f"üìó ID: {ID}\nName: {name}\nCompany name: {company_name}\nPhone number: {phone}\n"
          f"Telegram First Name: {telegram_frist_name}\nTelegram Last Name: {telegram_second_name}")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    accept = InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='accept_user_data')
    not_accept = InlineKeyboardButton(text='üîÑ –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞', callback_data='renew_user_data')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[accept, not_accept]])

    user_info = f"–ò–º—è: {name}\n–ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}"
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n\n{user_info}", reply_markup=keyboard)

    print('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î')
    user_role = 'user'

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        add_user(ID, name, telegram_frist_name, telegram_second_name, company_name, phone, user_role)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

    await state.clear()


@router.callback_query(F.data == "accept_user_data")
async def accept_registration(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    ID = callback_query.from_user.id
    name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    company_name = data.get("company", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    telegram_frist_name = callback_query.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    telegram_second_name = callback_query.from_user.last_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        add_user(ID, name, telegram_frist_name, telegram_second_name, company_name, phone, "user")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    my_profile = InlineKeyboardButton(text='üöπ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
    list_my_direction = InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è', callback_data='list_my_direction')
    list_direction = InlineKeyboardButton(text='üìÉ –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π', callback_data='list_directionn')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [my_profile],
        [list_direction],
        [list_my_direction]
    ])

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await callback_query.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=keyboard)
    await state.clear()